batch_size = batch_size)
train_gen_data <- train_gen()
model <- keras_model_sequential() %>%
layer_flatten(input_shape = c(lookback / step, dim(data)[-1])) %>%
layer_dense(units = 128, activation = "relu") %>%
layer_dense(units = 64, activation = "relu") %>%
layer_dense(units = 1)
summary(model)
model %>% compile(optimizer = optimizer_rmsprop(),
loss = "mae")
history <- model %>% fit(
train_data[[1]],train_data[[2]],
batch_size = 32,
epochs = 1,
)
lookback <- 240
step <- 1
delay <- 44
batch_size <- 64
train_gen <- generator(
data,
lookback = lookback,
delay = delay,
min_index = 1,
max_index = 30000,
shuffle = FALSE,
step = step,
batch_size = batch_size)
train_gen_data <- train_gen()
model <- keras_model_sequential() %>%
layer_flatten(input_shape = c(lookback / step, dim(data)[-1])) %>%
layer_dense(units = 128, activation = "relu") %>%
layer_dense(units = 64, activation = "relu") %>%
layer_dense(units = 1)
summary(model)
model %>% compile(optimizer = optimizer_rmsprop(),
loss = "mae")
history <- model %>% fit(
train_data[[1]],train_data[[2]],
batch_size = 32,
epochs = 100,
)
lookback <- 240
lookback <- 240
step <- 1
delay <- 44
batch_size <- 64
train_gen <- generator(
data,
lookback = lookback,
delay = delay,
min_index = 1,
max_index = 30000,
shuffle = FALSE,
step = step,
batch_size = batch_size)
train_gen_data <- train_gen()
model <- keras_model_sequential() %>%
layer_flatten(input_shape = c(lookback / step, dim(data)[-1])) %>%
layer_dense(units = 128, activation = "relu") %>%
layer_dense(units = 64, activation = "relu") %>%
layer_dense(units = 1)
summary(model)
model %>% compile(optimizer = optimizer_rmsprop(),
loss = "mae")
history <- model %>% fit(
train_data[[1]],train_data[[2]],
batch_size = 32,
epochs = 10
)
lookback <- 240
step <- 1
delay <- 44
batch_size <- 64
train_gen <- generator(
data,
lookback = lookback,
delay = delay,
min_index = 1,
max_index = 30000,
shuffle = FALSE,
step = step,
batch_size = batch_size)
train_gen_data <- train_gen()
model <- keras_model_sequential() %>%
layer_flatten(input_shape = c(lookback / step, dim(data)[-1])) %>%
layer_dense(units = 128, activation = "relu") %>%
layer_dense(units = 64, activation = "relu") %>%
layer_dense(units = 1)
summary(model)
model %>% compile(optimizer = optimizer_rmsprop(),
loss = "mae")
history <- model %>% fit(
train_gen_data[[1]],train_gen_data[[2]],
batch_size = 32,
epochs = 10
)
batch_size_plot <- 17600
lookback_plot <- lookback
step_plot <- 1
pred_gen <- generator(
data,
lookback = lookback_plot,
delay = 0,
min_index = 30000,
max_index = 50000,
shuffle = FALSE,
step = step_plot,
batch_size = batch_size_plot
)
pred_gen_data <- pred_gen()
V1 = seq(1, length(pred_gen_data[[2]]))
plot_data <-
as.data.frame(cbind(V1, pred_gen_data[[2]]))
inputdata <- pred_gen_data[[1]]
dim(inputdata) <- c(batch_size_plot, lookback, 14)
pred_out <- model %>%
predict(inputdata)
plot_data <-
cbind(plot_data, pred_out)
p <-
ggplot(plot_data, aes(x = V1, y = V2)) + geom_point(colour = "blue", size = 0.1,alpha=0.4)
p <-
p + geom_point(aes(x = V1, y = pred_out), colour = "red", size = 0.1 ,alpha=0.4)
p
T_data <- data[1:10000, 2]
x1 <- data.frame()
for (i in 1:10000) {
x1 <- rbind(x1, t(rev(T_data[i:(i + 240)])))
if(i%%100 == 0){print(i)}
}
x1 <- x1[,order(ncol(x1):1)]
x <- as.matrix(x1[,-241])
y <- as.matrix(x1[, 241])
dim(x) <- c(10000, 240, 1)
model <- keras_model_sequential() %>%
layer_lstm(units = 64, input_shape = c(240, 1)) %>%
layer_dense(units = 64, activation = "relu") %>%
layer_dense(units = 16, activation = "relu") %>%
layer_dense(units = 8, activation = "relu") %>%
layer_dense(units = 1, activation = "relu")
summary(model)
model %>% compile(loss = 'mean_squared_error', optimizer = 'adam',metrics='mse')
history <-
model %>% fit (
x,
y,
batch_size = 100,
epochs = 5,
validation_split = 0.1,
use_multiprocessing = T
)
#validation_data = val_gen,
#validation_steps = val_steps
plot(history)
batch_size_plot <- 19760
lookback_plot <- 240
step_plot <- 1
pred_gen <- generator(
data,
lookback = lookback_plot,
delay = 0,
min_index = 30000,
max_index = 50000,
shuffle = FALSE,
step = step_plot,
batch_size = batch_size_plot
)
pred_gen_data <- pred_gen()
V1 = seq(1, length(pred_gen_data[[2]]))
plot_data <-
as.data.frame(cbind(V1, pred_gen_data[[2]]))
inputdata <- pred_gen_data[[1]][,,2]
dim(inputdata) <- c(batch_size_plot,lookback_plot, 1)
pred_out <- model %>%
predict(inputdata)
plot_data <-
cbind(plot_data, pred_out)
p <-
ggplot(plot_data, aes(x = V1, y = V2)) + geom_point( colour = "blue", size = 0.1,alpha=0.4)
p <-
p + geom_point(aes(x = V1, y = pred_out), colour = "red", size = 0.1 ,alpha=0.4)
p
lookback <- 240
step <- 1
delay <- 44
batch_size <- 128
train_gen <- generator(
data,
lookback = lookback,
delay = delay,
min_index = 1,
max_index = 30000,
shuffle = FALSE,
step = step,
batch_size = batch_size)
train_gen_data <- train_gen()
model <- keras_model_sequential() %>%
layer_lstm(units = 64, input_shape = list(NULL, dim(data)[[-1]])) %>%
layer_dense(units = 64, activation = "relu") %>%
layer_dense(units = 32, activation = "relu") %>%
layer_dense(units = 1, activation = "relu")
model %>% compile(optimizer = optimizer_rmsprop(),
loss = "mae")
summary(model)
history <- model %>% fit(
train_gen_data[[1]],train_gen_data[[2]],
steps_per_epoch = 20,
epochs = 5,
use_multiprocessing = T
)
lookback <- 240
step <- 1
delay <- 44
batch_size <- 128
train_gen <- generator(
data,
lookback = lookback,
delay = delay,
min_index = 1,
max_index = 30000,
shuffle = FALSE,
step = step,
batch_size = batch_size)
train_gen_data <- train_gen()
model <- keras_model_sequential() %>%
layer_lstm(units = 64, input_shape = list(NULL, dim(data)[[-1]])) %>%
layer_dense(units = 64, activation = "relu") %>%
layer_dense(units = 32, activation = "relu") %>%
layer_dense(units = 1, activation = "relu")
model %>% compile(optimizer = optimizer_rmsprop(),
loss = "mae")
summary(model)
history <- model %>% fit(
train_gen_data[[1]],train_gen_data[[2]],
steps_per_epoch = 20,
epochs = 5,
batch_size = 5,
use_multiprocessing = T
)
batch_size_plot = 17600
lookback_plot <- 240
step_plot <- 1
pred_gen <- generator(
data,
lookback = lookback_plot,
delay = 0,
min_index = 30000,
max_index = 50000,
shuffle = FALSE,
step = step_plot,
batch_size = batch_size_plot
)
pred_gen_data <- pred_gen()
V1 = seq(1, length(pred_gen_data[[2]]))
plot_data <-
as.data.frame(cbind(V1, pred_gen_data[[2]]))
inputdata <- pred_gen_data[[1]][,,]
dim(inputdata) <- c(batch_size_plot,lookback_plot, 14)
pred_out <- model %>%
predict(inputdata)
plot_data <-
cbind(plot_data, pred_out[])
p <-
ggplot(plot_data, aes(x = V1, y = V2)) + geom_point( colour = "blue", size = 0.1,alpha=0.4)
p <-
p + geom_point(aes(x = V1, y = pred_out), colour = "red", size = 0.1 ,alpha=0.4)
p
lookback <- 240
step <- 1
delay <- 44
batch_size <- 128
train_gen <- generator(
data,
lookback = lookback,
delay = delay,
min_index = 1,
max_index = 30000,
shuffle = FALSE,
step = step,
batch_size = batch_size)
train_gen_data <- train_gen()
model <- keras_model_sequential() %>%
layer_lstm(units = 64, input_shape = list(NULL, dim(data)[[-1]])) %>%
layer_dense(units = 64, activation = "relu") %>%
layer_dense(units = 32, activation = "relu") %>%
layer_dense(units = 1, activation = "relu")
model %>% compile(optimizer = optimizer_rmsprop(),
loss = "mae")
summary(model)
history <- model %>% fit(
train_gen_data[[1]],train_gen_data[[2]],
steps_per_epoch = 24,
epochs = 5,
batch_size = 5,
use_multiprocessing = T
)
lookback <- 240
step <- 1
delay <- 44
batch_size <- 128
train_gen <- generator(
data,
lookback = lookback,
delay = delay,
min_index = 1,
max_index = 30000,
shuffle = FALSE,
step = step,
batch_size = batch_size)
train_gen_data <- train_gen()
model <- keras_model_sequential() %>%
layer_lstm(units = 64, input_shape = list(NULL, dim(data)[[-1]])) %>%
layer_dense(units = 64, activation = "relu") %>%
layer_dense(units = 32, activation = "relu") %>%
layer_dense(units = 1, activation = "relu")
model %>% compile(optimizer = optimizer_rmsprop(),
loss = "mae")
summary(model)
history <- model %>% fit(
train_gen_data[[1]],train_gen_data[[2]],
steps_per_epoch = 24,
epochs = 5,
use_multiprocessing = T
)
lookback <- 240
step <- 1
delay <- 44
batch_size <- 128
train_gen <- generator(
data,
lookback = lookback,
delay = delay,
min_index = 1,
max_index = 30000,
shuffle = FALSE,
step = step,
batch_size = batch_size)
train_gen_data <- train_gen()
model <- keras_model_sequential() %>%
layer_lstm(units = 64, input_shape = list(NULL, dim(data)[[-1]])) %>%
layer_dense(units = 64, activation = "relu") %>%
layer_dense(units = 32, activation = "relu") %>%
layer_dense(units = 1, activation = "relu")
model %>% compile(optimizer = optimizer_rmsprop(),
loss = "mae")
summary(model)
history <- model %>% fit(
train_gen_data[[1]],train_gen_data[[2]],
batch_size =1,
epochs = 5,
use_multiprocessing = T
)
lookback <- 240
step <- 1
delay <- 44
batch_size <- 128
train_gen <- generator(
data,
lookback = lookback,
delay = delay,
min_index = 1,
max_index = 30000,
shuffle = FALSE,
step = step,
batch_size = batch_size)
train_gen_data <- train_gen()
model <- keras_model_sequential() %>%
layer_lstm(units = 64, input_shape = list(NULL, dim(data)[[-1]])) %>%
layer_dense(units = 64, activation = "relu") %>%
layer_dense(units = 32, activation = "relu") %>%
layer_dense(units = 1, activation = "relu")
lookback <- 240
step <- 1
delay <- 44
batch_size <- 128
train_gen <- generator(
data,
lookback = lookback,
delay = delay,
min_index = 1,
max_index = 30000,
shuffle = FALSE,
step = step,
batch_size = batch_size)
train_gen_data <- train_gen()
model <- keras_model_sequential() %>%
layer_lstm(units = 64, input_shape = list(NULL, dim(data)[[-1]])) %>%
layer_dense(units = 64, activation = "relu") %>%
layer_dense(units = 32, activation = "relu") %>%
layer_dense(units = 1, activation = "relu")
model %>% compile(optimizer = optimizer_rmsprop(),
loss = "mae")
summary(model)
history <- model %>% fit(
train_gen_data[[1]],train_gen_data[[2]],
batch_size =4,
epochs = 5,
use_multiprocessing = T
)
lookback <- 240
step <- 1
delay <- 44
batch_size <- 128
train_gen <- generator(
data,
lookback = lookback,
delay = delay,
min_index = 1,
max_index = 30000,
shuffle = FALSE,
step = step,
batch_size = batch_size)
train_gen_data <- train_gen()
model <- keras_model_sequential() %>%
layer_lstm(units = 64, input_shape = list(NULL, dim(data)[[-1]])) %>%
layer_dense(units = 64, activation = "relu") %>%
layer_dense(units = 32, activation = "relu") %>%
layer_dense(units = 1, activation = "relu")
model %>% compile(optimizer = optimizer_rmsprop(),
loss = "mae")
summary(model)
history <- model %>% fit(
train_gen_data[[1]],train_gen_data[[2]],
batch_size = 1,
epochs = 5,
use_multiprocessing = T
)
lookback <- 240
step <- 1
delay <- 44
batch_size <- 128
train_gen <- generator(
data,
lookback = lookback,
delay = delay,
min_index = 1,
max_index = 30000,
shuffle = FALSE,
step = step,
batch_size = batch_size)
train_gen_data <- train_gen()
model <- keras_model_sequential() %>%
layer_lstm(units = 64, input_shape = list(NULL, dim(data)[[-1]])) %>%
layer_dense(units = 64, activation = "relu") %>%
layer_dense(units = 32, activation = "relu") %>%
layer_dense(units = 1, activation = "relu")
model %>% compile(optimizer = optimizer_rmsprop(),
loss = "mae")
summary(model)
history <- model %>% fit(
train_gen_data[[1]],train_gen_data[[2]],
batch_size = 4,
step_per_epoch = 1
epochs = 5,
lookback <- 240
step <- 1
delay <- 44
batch_size <- 128
train_gen <- generator(
data,
lookback = lookback,
delay = delay,
min_index = 1,
max_index = 30000,
shuffle = FALSE,
step = step,
batch_size = batch_size)
train_gen_data <- train_gen()
model <- keras_model_sequential() %>%
layer_lstm(units = 64, input_shape = list(NULL, dim(data)[[-1]])) %>%
layer_dense(units = 64, activation = "relu") %>%
layer_dense(units = 32, activation = "relu") %>%
layer_dense(units = 1, activation = "relu")
model %>% compile(optimizer = optimizer_rmsprop(),
loss = "mae")
summary(model)
history <- model %>% fit(
train_gen_data[[1]],train_gen_data[[2]],
batch_size = 4,
step_per_epoch = 1,
epochs = 5,
use_multiprocessing = T
)
batch_size_plot = 17600
lookback_plot <- 240
step_plot <- 1
pred_gen <- generator(
data,
lookback = lookback_plot,
delay = 0,
min_index = 30000,
max_index = 50000,
shuffle = FALSE,
step = step_plot,
batch_size = batch_size_plot
)
pred_gen_data <- pred_gen()
V1 = seq(1, length(pred_gen_data[[2]]))
plot_data <-
as.data.frame(cbind(V1, pred_gen_data[[2]]))
inputdata <- pred_gen_data[[1]][,,]
dim(inputdata) <- c(batch_size_plot,lookback_plot, 14)
pred_out <- model %>%
predict(inputdata)
plot_data <-
cbind(plot_data, pred_out[])
p <-
ggplot(plot_data, aes(x = V1, y = V2)) + geom_point( colour = "blue", size = 0.1,alpha=0.4)
p <-
p + geom_point(aes(x = V1, y = pred_out), colour = "red", size = 0.1 ,alpha=0.4)
p
